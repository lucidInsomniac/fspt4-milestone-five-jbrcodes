{"version":3,"sources":["components/Form.js","components/List.js","index.js","App.js"],"names":["Form","props","_useState","useState","_useState2","Object","slicedToArray","firstname","setFirstName","_useState3","_useState4","lastname","setLastName","handleChange","event","target","name","value","react_default","a","createElement","className","onSubmit","preventDefault","student","htmlFor","id","type","onChange","List","students","map","s","key","ReactDOM","render","setStudents","getStudents","fetch","options","headers","Content-Type","body","JSON","stringify","then","response","json","catch","error","console","log","useEffect","err","message","Form_Form","document","getElementById"],"mappings":"0PAGe,SAASA,EAAKC,GAAO,IAAAC,EAEAC,mBAAS,IAFTC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAE3BK,EAF2BH,EAAA,GAEhBI,EAFgBJ,EAAA,GAAAK,EAGFN,mBAAS,IAHPO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAG3BE,EAH2BD,EAAA,GAGjBE,EAHiBF,EAAA,GAuBlC,SAASG,EAAaC,GAGpB,OAAQA,EAAMC,OAAOC,MACnB,IAAK,YACHR,EAAaM,EAAMC,OAAOE,OAC1B,MAEF,IAAK,WACHL,EAAYE,EAAMC,OAAOE,QAO/B,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,gCAGAF,EAAAC,EAAAC,cAAA,QAAME,SAtCV,SAAsBR,GAEpBA,EAAMS,iBAGN,IAAMC,EAAU,CAAEjB,UAAWA,EAAWI,SAAUA,GAGlDV,EAAMqB,SAASE,GAGfhB,EAAa,IACbI,EAAY,MA2BRM,EAAAC,EAAAC,cAAA,SAAOK,QAAQ,aAAf,aAEEP,EAAAC,EAAAC,cAAA,SACEM,GAAG,YACHC,KAAK,OACLX,KAAK,YACLK,UAAU,YACVJ,MAAOV,EAEPqB,SAAUf,KAIdK,EAAAC,EAAAC,cAAA,SAAOK,QAAQ,YAAf,YAEEP,EAAAC,EAAAC,cAAA,SACEM,GAAG,WACHC,KAAK,OACLX,KAAK,WACLK,UAAU,WACVJ,MAAON,EAEPiB,SAAUf,KAIdK,EAAAC,EAAAC,cAAA,UAAQM,GAAG,SAASC,KAAK,UAAzB,YCxEO,SAASE,EAAK5B,GAC3B,OACEiB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,qCACAF,EAAAC,EAAAC,cAAA,WACKnB,EAAM6B,UACP7B,EAAM6B,SAASC,IAAI,SAAAC,GAAC,OAChBd,EAAAC,EAAAC,cAAA,KACAa,IAAMD,EAAER,SAEFQ,EAAER,aCPtBU,IAASC,OAAOjB,EAAAC,EAAAC,cCED,WAAe,IAAAlB,EAEEC,mBAAS,IAFXC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAEvB4B,EAFuB1B,EAAA,GAEbgC,EAFahC,EAAA,GAyB5B,SAASiC,IAEPC,MAAM,aAGN,IAAIC,EAAU,CACZC,QAAS,CACPC,eAAgB,oBAIlBC,KAAMC,KAAKC,UAAUd,IAIvBQ,MAAK,YAAcC,GAEhBM,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAE1BF,KAAK,SAAAf,GAEJM,EAAYN,KAGbkB,MAAM,SAAAC,GACLC,QAAQC,IAAIF,KAIlB,OAhDAG,oBAAU,WAERd,MAAM,aAEHO,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAE1BF,KAAK,SAAAf,GAEJoB,QAAQC,IAAI,SAAUrB,GAEtBM,EAAYN,KAEbkB,MAAM,SAAAK,GAELH,QAAQC,IAAI,QAASE,EAAIC,YAG5B,IAgCDpC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACmC,EAAD,CAAMjC,SAAU,SAAAQ,GAAQ,OAAIO,OAE5BnB,EAAAC,EAAAC,cAACS,EAAD,QD5DU,MAAS2B,SAASC,eAAe","file":"static/js/main.7677ba7f.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./Form.css\";\n\nexport default function Form(props) {\n  //hooks for for input\n  const [firstname, setFirstName] = useState(\"\");\n  const [lastname, setLastName] = useState(\"\");\n\n  //Event handle for event listener onSubmit, when it hears submit event\n  function handleSubmit(event) {\n    //prevent entire doc from reloading, only targeted event\n    event.preventDefault();\n\n    //define state obj to send to parent\n    const student = { firstname: firstname, lastname: lastname };\n\n    //do something onSubmit, send state obj to parent\n    props.onSubmit(student);\n\n    //reset fields\n    setFirstName(\"\");\n    setLastName(\"\");\n  }\n\n  //Event handler on onChange event listener\n  //captuere value changes when triggered new event\n  function handleChange(event) {\n    //if name matches event, set value with event value\n\n    switch (event.target.name) {\n      case \"firstname\":\n        setFirstName(event.target.value);\n        break;\n\n      case \"lastname\":\n        setLastName(event.target.value);\n        break;\n      default:\n        break;\n    }\n  }\n\n  return (\n    <div className=\"studentsForm\">\n      <h1>_CodeOp's Facebook</h1>\n\n      {/* form with event listener onSubmit to trigger handleSubmit */}\n      <form onSubmit={handleSubmit}>\n        <label htmlFor=\"firstname\">\n          First Name\n          <input\n            id=\"firstname\"\n            type=\"text\"\n            name=\"firstname\"\n            className=\"firstname\"\n            value={firstname}\n            // when new values entered\n            onChange={handleChange}\n          />\n        </label>\n\n        <label htmlFor=\"lastname\">\n          Last Name\n          <input\n            id=\"lastname\"\n            type=\"text\"\n            name=\"lastname\"\n            className=\"lastname\"\n            value={lastname}\n            // when new values entered\n            onChange={handleChange}\n          />\n        </label>\n        {/* button goes here */}\n        <button id=\"submit\" type=\"submit\">\n          Submit\n        </button>\n      </form>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport default function List(props) {\n  return (\n    <div className=\"studentsList\">\n      <h2>Current CodeOp Students</h2>\n      <div>\n          {props.students &&\n          props.students.map(s => (\n              <p\n              key={ s.student }\n              >\n                  { s.student }\n              </p>\n          ))\n\n          }\n      </div>\n\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\n//import form component\nimport Form from \"./components/Form\";\n//import list component\nimport List from \"./components/List\";\n\nexport default function App() {\n  //hooksfor collection of student (firstname, lastname)\n  let [students, setStudents] = useState([]);\n\n  //hook executes before render, pulls existing records from DB and allows\n  // data to be displayed\n  useEffect(() => {\n    //use fetch to request URL\n    fetch(\"/students\") // connects to server/ students.js\n      //send requestand convert JSON\n      .then(response => response.json())\n      //returns data array of students\n      .then(students => {\n        //check\n        console.log(\"parent\", students);\n        //set students\n        setStudents(students);\n      }) //catch errors\n      .catch(err => {\n        //if error caugh show err msg\n        console.log(\"ERROR\", err.message);\n      });\n    // getStudents();\n  }, []); //gets saved in a new array\n\n  function getStudents() {\n    // pass student as arg\n    fetch(\"/students\");\n\n    //req method default is always GET\n    let options = {\n      headers: {\n        \"Content-Type\": \"application/json\" //Description of file type is a JSON format\n      },\n\n      //elements into JSON elements from the data entered in the body\n      body: JSON.stringify(students)\n    };\n\n    //2nd fetch  for response, looks for student with matching id\n    fetch(`/students`, options)\n      //promise with fetch and converts json\n      .then(response => response.json())\n      //returns data array\n      .then(students => {\n        //updates data to array\n        setStudents(students);\n      })\n      //catches any errors\n      .catch(error => {\n        console.log(error);\n      });\n  }\n\n  return (\n    <div className=\"App\">\n      <Form onSubmit={students => getStudents(students)} />\n\n      <List />\n    </div>\n  );\n}\n"],"sourceRoot":""}